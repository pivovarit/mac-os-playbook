- name: Add zsh
  lineinfile:
    backup: yes
    dest: /etc/shells
    regexp: ^/usr/local/bin/zsh
    line: /usr/local/bin/zsh
  become: true

- name: Default to zsh
  user:
    name: "{{ ansible_env.USER }}"
    shell: /usr/local/bin/zsh
  become: yes

- name: Verify if oh-my-zsh Is Installed
  stat:
    path: "~/.oh-my-zsh/oh-my-zsh.sh"
  register: "omz_installed"

- name: Install oh-my-zsh
  shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" "" --unattended

  when: not omz_installed.stat.exists

- name: Initialize oh-my-zsh
  lineinfile:
    dest: ~/.zshrc
    regexp: 'oh-my-zsh.sh'
    line: 'source $ZSH/oh-my-zsh.sh'
    state: present

- name: Install zsh-autosuggestions
  git:
    repo: https://github.com/zsh-users/zsh-autosuggestions
    dest: ~/.oh-my-zsh/custom/plugins/zsh-autosuggestions

- name: Install zsh-completions
  git:
    repo: https://github.com/zsh-users/zsh-completions
    dest: ~/.oh-my-zsh/custom/plugins/zsh-completions

- name: Set Plugins
  lineinfile:
    dest: ~/.zshrc
    regexp: '^plugins'
    line: 'plugins=(git aws docker zsh-autosuggestions zsh-completions dotenv osx)'
    state: present

- name: Verify if SDKMAN Is Installed
  stat:
    path: "~/.sdkman/"
  register: "sdkman_installed"

- name: Install SDKMAN
  shell: 'curl -s http://get.sdkman.io | bash'
  args:
    executable: /bin/bash
    warn: no
  when: not sdkman_installed.stat.exists

- name: Add SDKMAN in .zshrc
  lineinfile:
    dest: ~/.zshrc
    regexp: 'sdkman-init.sh'
    line: 'source $HOME/.sdkman/bin/sdkman-init.sh'
    state: present

- name: Enable tty_tickets
  lineinfile:
    dest: /etc/sudoers
    state: present
    line: "Defaults tty_tickets"
    validate: "visudo -cf %s"
  become: yes

- name: Update zsh Daily
  lineinfile:
    dest: ~/.zshrc
    regexp: 'UPDATE_ZSH_DAYS'
    line: 'export UPDATE_ZSH_DAYS=1'
    state: present

- name: Enforce OSX-specific Key Bindings
  lineinfile:
    dest: ~/.zshrc
    regexp: "{{ item.value }}"
    line: "bindkey \"{{ item.key }}\" {{ item.value }}"
    state: present
  with_items:
    - { key: '[D', value: 'backward-word' }
    - { key: '[C', value: 'forward-word' }
    - { key: '^[a', value: 'beginning-of-line' }
    - { key: '^[e', value: 'end-of-line' }
    - { key: '\e[A', value: 'history-search-backward' }
    - { key: '\e[B', value: 'history-search-forward' }